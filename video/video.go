package video

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"yt_downloader/utils"
	"yt_downloader/subtitles"
)

// VideoQuality –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
type VideoQuality struct {
	Format      string
	Resolution  string
	Description string
	YtDlpFormat string
}

// –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
var VideoQualities = []VideoQuality{
	{"mp4", "720p", "720p MP4 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", "bestvideo[height<=720][ext=mp4]+bestaudio[ext=m4a]/best[height<=720][ext=mp4]/best[height<=720]"},
	{"mp4", "1080p", "1080p MP4 (Full HD)", "bestvideo[height<=1080][ext=mp4]+bestaudio[ext=m4a]/best[height<=1080][ext=mp4]/best[height<=1080]"},
	{"mp4", "1440p", "1440p MP4 (2K)", "bestvideo[height<=1440][ext=mp4]+bestaudio[ext=m4a]/best[height<=1440][ext=mp4]/best[height<=1440]"},
	{"mp4", "2160p", "2160p MP4 (4K)", "bestvideo[height<=2160][ext=mp4]+bestaudio[ext=m4a]/best[height<=2160][ext=mp4]/best[height<=2160]"},
	{"webm", "720p", "720p WebM", "bestvideo[height<=720][ext=webm]+bestaudio[ext=webm]/best[height<=720][ext=webm]/best[height<=720]"},
	{"webm", "1080p", "1080p WebM", "bestvideo[height<=1080][ext=webm]+bestaudio[ext=webm]/best[height<=1080][ext=webm]/best[height<=1080]"},
	{"mp4", "best", "–õ—É—á—à–µ–µ MP4", "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best"},
	{"any", "best", "–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)", "bestvideo+bestaudio/best"},
}

// –í—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 720p MP4)
var SelectedVideoQuality = VideoQualities[0]

// PromptVideoQuality –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
func PromptVideoQuality() {
	fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:")
	for i, quality := range VideoQualities {
		fmt.Printf("%d - %s\n", i+1, quality.Description)
	}
	
	var choice string
	fmt.Print("–í–∞—à –≤—ã–±–æ—Ä (1-", len(VideoQualities), "): ")
	fmt.Scanln(&choice)
	
	switch choice {
	case "2":
		SelectedVideoQuality = VideoQualities[1] // 1080p MP4
	case "3":
		SelectedVideoQuality = VideoQualities[2] // 1440p MP4
	case "4":
		SelectedVideoQuality = VideoQualities[3] // 2160p MP4
	case "5":
		SelectedVideoQuality = VideoQualities[4] // 720p WebM
	case "6":
		SelectedVideoQuality = VideoQualities[5] // 1080p WebM
	case "7":
		SelectedVideoQuality = VideoQualities[6] // –õ—É—á—à–µ–µ MP4
	case "8":
		SelectedVideoQuality = VideoQualities[7] // –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
	default:
		SelectedVideoQuality = VideoQualities[0] // 720p MP4 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}
	
	fmt.Printf("‚úÖ –í—ã–±—Ä–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ: %s\n", SelectedVideoQuality.Description)
}

// GetVideoTitle –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube
func GetVideoTitle(url string) string {
	title := utils.GetVideoTitle(url)
	if title == "" {
		title = utils.GenerateFallbackTitle()
	}
	return utils.SanitizeFileName(title)
}

// DownloadVideo —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
func DownloadVideo(url string, filename string, folder string) {
	DownloadVideoWithOptions(url, filename, folder, subtitles.DefaultSubtitleOptions)
}

// DownloadVideoWithSubtitles —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
func DownloadVideoWithSubtitles(url string, filename string, folder string, subOptions subtitles.SubtitleOptions) {
	DownloadVideoWithOptions(url, filename, folder, subOptions)
}

// DownloadVideoWithOptions —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–ª–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
func DownloadVideoWithOptions(url string, filename string, folder string, subOptions subtitles.SubtitleOptions) {
	// –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
	if subOptions.DownloadSubtitles {
		err := subtitles.DownloadWithSubtitles(url, filename, folder, SelectedVideoQuality.YtDlpFormat, subOptions)
		if err != nil {
			fmt.Printf("‚ö† –û—à–∏–±–∫–∞: %v\n", err)
		}
		return
	}
	
	// –û–±—ã—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
	ytPath := filepath.Join("bin", "yt-dlp.exe")
	outPath := filepath.Join(folder, filename+".%(ext)s")
	
	fmt.Printf("üé¨ –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ: %s\n", filename)
	fmt.Printf("üìÅ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤: %s\n", folder)
	fmt.Printf("üéØ –ö–∞—á–µ—Å—Ç–≤–æ: %s\n", SelectedVideoQuality.Description)
	
	// –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è yt-dlp
	args := []string{
		"-f", SelectedVideoQuality.YtDlpFormat, // —Ñ–æ—Ä–º–∞—Ç –∫–∞—á–µ—Å—Ç–≤–∞
		"-o", outPath,                          // –ø—É—Ç—å –≤—ã–≤–æ–¥–∞
		"--no-warnings",                        // –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
		"--console-title",                      // –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
		url,
	}
	
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
	args = append(args, 
		"--retries", "3",           // –ø–æ–≤—Ç–æ—Ä–∏—Ç—å 3 —Ä–∞–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
		"--fragment-retries", "3",  // –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã 3 —Ä–∞–∑–∞
	)
	
	cmd := exec.Command(ytPath, args...)
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
	cmd.Env = append(os.Environ(), "PYTHONIOENCODING=utf-8")
	
	// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	
	fmt.Println("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
	
	if err := cmd.Run(); err != nil {
		fmt.Printf("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: %v\n", err)
		return
	}
	
	fmt.Printf("‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: %s\n", filename)
	utils.PlayBeep() // –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –æ–∫–æ–Ω—á–∞–Ω–∏—è
}

// ProcessVideoBatchFile –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º URL –¥–ª—è –≤–∏–¥–µ–æ
func ProcessVideoBatchFile(filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Printf("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: %s\n", filePath)
		return
	}
	defer file.Close()
	
	var urls []string
	scanner := bufio.NewScanner(file)
	
	// –ß–∏—Ç–∞–µ–º –≤—Å–µ URL –∏–∑ —Ñ–∞–π–ª–∞
	for scanner.Scan() {
		url := strings.TrimSpace(scanner.Text())
		if url == "" || strings.HasPrefix(url, "#") {
			continue // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
		}
		urls = append(urls, url)
	}
	
	if err := scanner.Err(); err != nil {
		fmt.Printf("‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
		return
	}
	
	if len(urls) == 0 {
		fmt.Println("‚ö† –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö URL")
		return
	}
	
	fmt.Printf("üìã –ù–∞–π–¥–µ–Ω–æ %d –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n", len(urls))
	folder, _ := os.Getwd()
	
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π URL
	for i, url := range urls {
		fmt.Printf("\nüé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º %d/%d: %s\n", i+1, len(urls), url)
		
		fileName := GetVideoTitle(url)
		DownloadVideo(url, fileName, folder)
		
		// –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
		if i < len(urls)-1 {
			fmt.Println("‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–∏–¥–µ–æ...")
			// time.Sleep(2 * time.Second) // —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–∞—É–∑–∞
		}
	}
	
	fmt.Printf("\nüéâ –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: %d\n", len(urls))
}