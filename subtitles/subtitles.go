package subtitles

import (
	"encoding/json"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"yt_downloader/utils"
)

// SubtitleInfo –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–±—Ç–∏—Ç—Ä–∞—Ö
type SubtitleInfo struct {
	Language string `json:"language"`
	Name     string `json:"name"`
	Ext      string `json:"ext"`
	URL      string `json:"url"`
}

// AudioTrackInfo –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤—É–∫–æ–≤–æ–π –¥–æ—Ä–æ–∂–∫–µ
type AudioTrackInfo struct {
	Language string `json:"language"`
	Name     string `json:"name"`
	Ext      string `json:"ext"`
	Quality  string `json:"quality"`
}

// VideoMetadata —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
type VideoMetadata struct {
	Title             string            `json:"title"`
	AvailableSubtitles []SubtitleInfo   `json:"subtitles"`
	AudioTracks       []AudioTrackInfo `json:"formats"`
}

// SubtitleOptions –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
type SubtitleOptions struct {
	DownloadSubtitles bool
	SubtitleFormat    string   // srt, vtt, ass
	Languages         []string // —è–∑—ã–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	DownloadAll       bool     // —Å–∫–∞—á–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
}

// AudioTrackOptions –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–≤—É–∫–æ–≤—ã—Ö –¥–æ—Ä–æ–∂–µ–∫
type AudioTrackOptions struct {
	PreferredLanguages []string // –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —è–∑—ã–∫–∏
	DownloadMultiple   bool     // —Å–∫–∞—á–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ—Ä–æ–∂–µ–∫
}

// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
var (
	DefaultSubtitleOptions = SubtitleOptions{
		DownloadSubtitles: false,
		SubtitleFormat:    "srt",
		Languages:         []string{"ru", "en", "uk"},
		DownloadAll:       false,
	}
	
	DefaultAudioOptions = AudioTrackOptions{
		PreferredLanguages: []string{"ru", "en", "uk", "orig"},
		DownloadMultiple:   false,
	}
)

// GetVideoMetadata –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
func GetVideoMetadata(url string) (*VideoMetadata, error) {
	ytPath := filepath.Join("bin", "yt-dlp.exe")
	
	// –ü–æ–ª—É—á–∞–µ–º JSON —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ
	cmd := exec.Command(ytPath, 
		"--dump-json",           // –≤—ã–≤–æ–¥–∏—Ç—å JSON
		"--no-warnings",         // –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
		"--encoding", "utf-8",   // –∫–æ–¥–∏—Ä–æ–≤–∫–∞
		url,
	)
	
	cmd.Env = append(os.Environ(), "PYTHONIOENCODING=utf-8")
	
	output, err := cmd.Output()
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	
	var metadata VideoMetadata
	if err := json.Unmarshal(output, &metadata); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}
	
	return &metadata, nil
}

// GetAvailableSubtitles –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤
func GetAvailableSubtitles(url string) ([]SubtitleInfo, error) {
	ytPath := filepath.Join("bin", "yt-dlp.exe")
	
	cmd := exec.Command(ytPath,
		"--list-subs",           // —Å–ø–∏—Å–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
		"--no-warnings",
		url,
	)
	
	cmd.Env = append(os.Environ(), "PYTHONIOENCODING=utf-8")
	
	output, err := cmd.Output()
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: %v", err)
	}
	
	// –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ --list-subs
	return parseSubtitlesList(string(output)), nil
}

// parseSubtitlesList –ø–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã --list-subs
func parseSubtitlesList(output string) []SubtitleInfo {
	var subtitles []SubtitleInfo
	lines := strings.Split(output, "\n")
	
	var inSubtitlesSection bool
	for _, line := range lines {
		line = strings.TrimSpace(line)
		
		// –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
		if strings.Contains(line, "Available subtitles") {
			inSubtitlesSection = true
			continue
		}
		
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã
		if strings.Contains(line, "Available automatic captions") {
			inSubtitlesSection = false
			continue
		}
		
		if !inSubtitlesSection || line == "" {
			continue
		}
		
		// –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ (—Ñ–æ—Ä–º–∞—Ç: "ru vtt")
		parts := strings.Fields(line)
		if len(parts) >= 2 {
			subtitle := SubtitleInfo{
				Language: parts[0],
				Name:     getLanguageName(parts[0]),
				Ext:      parts[1],
			}
			subtitles = append(subtitles, subtitle)
		}
	}
	
	return subtitles
}

// getLanguageName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
func getLanguageName(code string) string {
	languages := map[string]string{
		"ru":    "–†—É—Å—Å–∫–∏–π",
		"en":    "English",
		"uk":    "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
		"de":    "Deutsch",
		"fr":    "Fran√ßais",
		"es":    "Espa√±ol",
		"it":    "Italiano",
		"pt":    "Portugu√™s",
		"ja":    "Êó•Êú¨Ë™û",
		"ko":    "ÌïúÍµ≠Ïñ¥",
		"zh":    "‰∏≠Êñá",
		"ar":    "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
		"hi":    "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä",
		"pl":    "Polski",
		"tr":    "T√ºrk√ße",
		"nl":    "Nederlands",
		"sv":    "Svenska",
		"no":    "Norsk",
		"da":    "Dansk",
		"fi":    "Suomi",
		"orig":  "–û—Ä–∏–≥–∏–Ω–∞–ª",
	}
	
	if name, exists := languages[code]; exists {
		return name
	}
	return strings.ToUpper(code) // fallback
}

// PromptSubtitleOptions –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤
func PromptSubtitleOptions() SubtitleOptions {
	var options SubtitleOptions
	
	fmt.Println("\nüìù === –ù–ê–°–¢–†–û–ô–ö–ê –°–£–ë–¢–ò–¢–†–û–í ===")
	
	var choice string
	fmt.Println("–°–∫–∞—á–∏–≤–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã?")
	fmt.Println("1 - –î–∞")
	fmt.Println("2 - –ù–µ—Ç")
	fmt.Print("–í–∞—à –≤—ã–±–æ—Ä: ")
	fmt.Scanln(&choice)
	
	if choice != "1" {
		options.DownloadSubtitles = false
		return options
	}
	
	options.DownloadSubtitles = true
	
	// –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
	fmt.Println("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤:")
	fmt.Println("1 - SRT (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
	fmt.Println("2 - VTT (WebVTT)")
	fmt.Println("3 - ASS (Advanced SubStation)")
	fmt.Print("–í–∞—à –≤—ã–±–æ—Ä: ")
	fmt.Scanln(&choice)
	
	switch choice {
	case "2":
		options.SubtitleFormat = "vtt"
	case "3":
		options.SubtitleFormat = "ass"
	default:
		options.SubtitleFormat = "srt"
	}
	
	// –í—ã–±–æ—Ä —è–∑—ã–∫–æ–≤
	fmt.Println("\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤:")
	fmt.Println("1 - –†—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
	fmt.Println("2 - –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ")
	fmt.Println("3 - –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π")
	fmt.Println("4 - –¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
	fmt.Println("5 - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤—ã–±–æ—Ä")
	fmt.Print("–í–∞—à –≤—ã–±–æ—Ä: ")
	fmt.Scanln(&choice)
	
	switch choice {
	case "2":
		options.DownloadAll = true
	case "3":
		options.Languages = []string{"ru"}
	case "4":
		options.Languages = []string{"en"}
	case "5":
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥—ã —è–∑—ã–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: ru,en,de,fr): ")
		var langInput string
		fmt.Scanln(&langInput)
		options.Languages = strings.Split(strings.ReplaceAll(langInput, " ", ""), ",")
	default:
		options.Languages = []string{"ru", "en"}
	}
	
	fmt.Printf("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: —Ñ–æ—Ä–º–∞—Ç %s\n", options.SubtitleFormat)
	if options.DownloadAll {
		fmt.Println("üìù –Ø–∑—ã–∫–∏: –í–°–ï –î–û–°–¢–£–ü–ù–´–ï")
	} else {
		fmt.Printf("üìù –Ø–∑—ã–∫–∏: %v\n", options.Languages)
	}
	
	return options
}

// ShowAvailableSubtitles –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è –≤–∏–¥–µ–æ
func ShowAvailableSubtitles(url string) {
	fmt.Println("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã...")
	
	subtitles, err := GetAvailableSubtitles(url)
	if err != nil {
		fmt.Printf("‚ö† –û—à–∏–±–∫–∞: %v\n", err)
		return
	}
	
	if len(subtitles) == 0 {
		fmt.Println("‚ùå –°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}
	
	fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: %d\n", len(subtitles))
	fmt.Println("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:")
	
	for _, sub := range subtitles {
		fmt.Printf("   ‚Ä¢ %s (%s) - —Ñ–æ—Ä–º–∞—Ç: %s\n", 
			sub.Name, sub.Language, strings.ToUpper(sub.Ext))
	}
}

// BuildSubtitleArgs —Å–æ–∑–¥–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è yt-dlp —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
func BuildSubtitleArgs(options SubtitleOptions) []string {
	if !options.DownloadSubtitles {
		return []string{}
	}
	
	args := []string{
		"--write-subs",        // —Å–∫–∞—á–∏–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã
		"--sub-format", options.SubtitleFormat,
	}
	
	if options.DownloadAll {
		// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–ª—è –≤—Å–µ—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º --all-subs
		args = append(args, "--all-subs")
	} else {
		// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —è–∑—ã–∫–æ–≤
		langs := strings.Join(options.Languages, ",")
		args = append(args, "--sub-langs", langs)
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	fmt.Printf("üîß –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Å—É–±—Ç–∏—Ç—Ä–æ–≤: %v\n", args)
	
	return args
}

// DownloadWithSubtitles —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
func DownloadWithSubtitles(url, filename, folder string, videoFormat string, subOptions SubtitleOptions) error {
	ytPath := filepath.Join("bin", "yt-dlp.exe")
	outPath := filepath.Join(folder, filename+".%(ext)s")
	
	// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è 1080p
	finalVideoFormat := videoFormat
	if videoFormat == "best[height<=1080][ext=mp4]" {
		// –ü–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
		finalVideoFormat = "bestvideo[height<=1080][ext=mp4]+bestaudio[ext=m4a]/best[height<=1080][ext=mp4]/best[height<=1080]"
	} else if videoFormat == "best[height<=720][ext=mp4]" {
		finalVideoFormat = "bestvideo[height<=720][ext=mp4]+bestaudio[ext=m4a]/best[height<=720][ext=mp4]/best[height<=720]"
	}
	
	// –ë–∞–∑–æ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –≤–∏–¥–µ–æ
	args := []string{
		"-f", finalVideoFormat,
		"-o", outPath,
		"--no-warnings",
		"--console-title",        // –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
	subArgs := BuildSubtitleArgs(subOptions)
	args = append(args, subArgs...)
	
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
	args = append(args, 
		"--retries", "3",
		"--fragment-retries", "3",
	)
	
	args = append(args, url)
	
	fmt.Printf("üé¨ –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏: %s\n", filename)
	fmt.Printf("üéØ –§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ: %s\n", finalVideoFormat)
	if subOptions.DownloadSubtitles {
		if subOptions.DownloadAll {
			fmt.Printf("üìù –°—É–±—Ç–∏—Ç—Ä—ã: %s (–í–°–ï –Ø–ó–´–ö–ò)\n", subOptions.SubtitleFormat)
		} else {
			fmt.Printf("üìù –°—É–±—Ç–∏—Ç—Ä—ã: %s, —è–∑—ã–∫–∏: %v\n", 
				subOptions.SubtitleFormat, subOptions.Languages)
		}
	}
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	fmt.Printf("üîß –ö–æ–º–∞–Ω–¥–∞: %s %s\n", ytPath, strings.Join(args, " "))
	
	cmd := exec.Command(ytPath, args...)
	cmd.Env = append(os.Environ(), "PYTHONIOENCODING=utf-8")
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	
	err := cmd.Run()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: %v", err)
	}
	
	fmt.Printf("‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ (.%s)\n", 
		subOptions.SubtitleFormat)
	
	utils.PlayBeep()
	return nil
}