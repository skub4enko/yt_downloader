//go:build windows

package utils

import (
	"bytes"
	"encoding/binary"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/go-audio/audio"
	"github.com/go-audio/wav"
	"github.com/hajimehoshi/oto/v2"
)

// =================== YouTube Downloader ===================

// GetVideoTitle –∏–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å YouTube
func GetVideoTitle(url string) string {
	ytPath := filepath.Join("bin", "yt-dlp.exe")
	
	// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏
	cmd := exec.Command(ytPath, "--quiet", "--get-title", "--encoding", "utf-8", url)
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
	cmd.Env = append(os.Environ(), "PYTHONIOENCODING=utf-8")
	
	output, err := cmd.Output()
	if err != nil {
		fmt.Println("‚ö† Failed to get title:", err)
		return ""
	}
	
	title := strings.TrimSpace(string(output))
	
	// –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç yt-dlp
	fmt.Printf("üîç –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç yt-dlp: '%s'\n", title)
	fmt.Printf("üìè –î–ª–∏–Ω–∞: %d –±–∞–π—Ç, UTF-8 –≤–∞–ª–∏–¥–Ω–æ: %t\n", len(title), utf8.ValidString(title))
	
	return title
}

// =================== –§–∞–π–ª–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã ===================

// GenerateFallbackTitle –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fallback-–Ω–∞–∑–≤–∞–Ω–∏–µ
func GenerateFallbackTitle() string {
	return "video_" + fmt.Sprintf("%d", time.Now().Unix())
}

// SanitizeFileName –æ—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–ï —É–¥–∞–ª—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É, —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã!
func SanitizeFileName(name string) string {
	if name == "" {
		return GenerateFallbackTitle()
	}
	
	original := name
	
	// –°–¢–ê–†–ê–Ø –í–ï–†–°–ò–Ø (–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û):
	// re := regexp.MustCompile("[^a-zA-Z0-9-_.]+")  // <-- –≠–¢–û –£–ë–ò–í–ê–õ–û –ö–ò–†–ò–õ–õ–ò–¶–£!
	// return re.ReplaceAllString(name, "_")
	
	// –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø (–ü–†–ê–í–ò–õ–¨–ù–û):
	// –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤
	dangerousChars := regexp.MustCompile(`[<>:"/\\|?*]`)
	name = dangerousChars.ReplaceAllString(name, "_")
	
	// –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã (–Ω–æ –Ω–µ –æ–±—ã—á–Ω—ã–µ!)
	controlChars := regexp.MustCompile(`[\x00-\x1f\x7f]`)
	name = controlChars.ReplaceAllString(name, "")
	
	// –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
	multipleSpaces := regexp.MustCompile(`\s+`)
	name = multipleSpaces.ReplaceAllString(name, " ")
	
	// –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
	name = strings.TrimSpace(name)
	
	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (–æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
	if len(name) > 200 {
		name = truncateUTF8(name, 200)
	}
	
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ Windows
	reservedNames := []string{"CON", "PRN", "AUX", "NUL", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9", "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", "LPT9"}
	upper := strings.ToUpper(name)
	for _, reserved := range reservedNames {
		if upper == reserved || strings.HasPrefix(upper, reserved+".") {
			name = "_" + name
			break
		}
	}
	
	// –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
	if name == "" {
		name = GenerateFallbackTitle()
	}
	
	// –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
	if original != name {
		fmt.Printf("üìù –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è: '%s' -> '%s'\n", original, name)
	} else {
		fmt.Printf("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: '%s'\n", name)
	}
	
	return name
}

// truncateUTF8 –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–µ–∑–∞–µ—Ç UTF-8 —Å—Ç—Ä–æ–∫—É
func truncateUTF8(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	
	for i := maxLen; i >= 0; i-- {
		if utf8.ValidString(s[:i]) {
			return s[:i]
		}
	}
	
	return s[:maxLen]
}

// ParseURLsFromFile –ø–∞—Ä—Å–∏—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
func ParseURLsFromFile(content string) []string {
	lines := strings.Split(content, "\n")
	var urls []string
	
	for _, line := range lines {
		line = strings.TrimSpace(line)
		
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
		if line == "" || strings.HasPrefix(line, "#") || strings.HasPrefix(line, "//") {
			continue
		}
		
		// –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ URL
		if strings.Contains(line, "youtube.com") || 
		   strings.Contains(line, "youtu.be") ||
		   strings.Contains(line, "http://") ||
		   strings.Contains(line, "https://") {
			urls = append(urls, line)
		}
	}
	
	return urls
}

// IsValidURL –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º URL
func IsValidURL(url string) bool {
	return strings.Contains(url, "youtube.com") || 
		   strings.Contains(url, "youtu.be") ||
		   strings.HasPrefix(url, "http://") ||
		   strings.HasPrefix(url, "https://")
}

// =================== WAV-–ø–ª–µ–µ—Ä ===================

// intBufferToBytes –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç *audio.IntBuffer –≤ []byte (16-bit little endian)
func intBufferToBytes(buf *audio.IntBuffer) []byte {
	out := make([]byte, len(buf.Data)*2)
	for i, v := range buf.Data {
		binary.LittleEndian.PutUint16(out[i*2:], uint16(int16(v)))
	}
	return out
}

// PlayBeep –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∑–≤—É–∫ –∏–∑ —Ñ–∞–π–ª–∞ assets/beep_long.wav
func PlayBeep() {
	f, err := os.Open("assets/beep_long.wav")
	if err != nil {
		fmt.Println("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å beep_long.wav:", err)
		return
	}
	defer f.Close()

	decoder := wav.NewDecoder(f)
	if !decoder.IsValidFile() {
		fmt.Println("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π WAV —Ñ–∞–π–ª")
		return
	}

	buf, err := decoder.FullPCMBuffer()
	if err != nil {
		fmt.Println("‚ö† –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è WAV:", err)
		return
	}

	ctx, ready, err := oto.NewContext(int(buf.Format.SampleRate), buf.Format.NumChannels, 2)
	if err != nil {
		fmt.Println("‚ö† –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ:", err)
		return
	}
	<-ready

	player := ctx.NewPlayer(bytes.NewReader(intBufferToBytes(buf)))
	defer player.Close()

	player.Play()

	// –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
	for player.IsPlaying() {
		time.Sleep(100 * time.Millisecond)
	}
}

// =================== –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ yt-dlp ===================

// UpdateYtDlp –æ–±–Ω–æ–≤–ª—è–µ—Ç yt-dlp.exe –≤ –ø–∞–ø–∫–µ bin
func UpdateYtDlp() {
	ytPath := filepath.Join("bin", "yt-dlp.exe")

	cmd := exec.Command(ytPath, "-U")
	output, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Println("‚ö† –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è yt-dlp:", err)
		fmt.Println(string(output))
		return
	}
	fmt.Println("‚úÖ yt-dlp –æ–±–Ω–æ–≤–ª—ë–Ω")
	fmt.Println(string(output))
}

// CheckUpdateYtDlp –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ yt-dlp
func CheckUpdateYtDlp() {
	ytPath := filepath.Join("bin", "yt-dlp.exe")

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∏–Ω–∞—Ä—å
	if _, err := os.Stat(ytPath); os.IsNotExist(err) {
		fmt.Println("‚ö† bin/yt-dlp.exe –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–∫–∞—á–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é...")
		downloadYtDlp(ytPath)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
	cmd := exec.Command(ytPath, "--version")
	currentVerBytes, err := cmd.Output()
	if err != nil {
		fmt.Println("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é yt-dlp:", err)
		return
	}
	currentVer := strings.TrimSpace(string(currentVerBytes))

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Å GitHub
	resp, err := http.Get("https://api.github.com/repos/yt-dlp/yt-dlp/releases/latest")
	if err != nil {
		fmt.Println("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é:", err)
		return
	}
	defer resp.Body.Close()

	var data map[string]interface{}
	json.NewDecoder(resp.Body).Decode(&data)
	latestVer, _ := data["tag_name"].(string)

	if latestVer != "" && latestVer != currentVer {
		fmt.Println("‚¨Ü –î–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π yt-dlp:", latestVer, "—Ç–µ–∫—É—â–∞—è:", currentVer)
		UpdateYtDlp()
	} else {
		fmt.Println("‚úÖ yt-dlp –∞–∫—Ç—É–∞–ª–µ–Ω:", currentVer)
	}
}

// downloadYtDlp —Å–∫–∞—á–∏–≤–∞–µ—Ç yt-dlp.exe –≤ bin/
func downloadYtDlp(ytPath string) {
	url := "https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe"
	resp, err := http.Get(url)
	if err != nil {
		fmt.Println("‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ yt-dlp:", err)
		return
	}
	defer resp.Body.Close()

	os.MkdirAll(filepath.Dir(ytPath), os.ModePerm)

	out, err := os.Create(ytPath)
	if err != nil {
		fmt.Println("‚ö† –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ yt-dlp.exe:", err)
		return
	}
	defer out.Close()

	_, err = io.Copy(out, resp.Body)
	if err != nil {
		fmt.Println("‚ö† –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ yt-dlp.exe:", err)
		return
	}

	fmt.Println("‚úÖ yt-dlp.exe —Å–∫–∞—á–∞–Ω –≤ bin/")
}