package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
	"yt_downloader/audio"
	"yt_downloader/video"
	"yt_downloader/subtitles" // –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å —Å—É–±—Ç–∏—Ç—Ä–æ–≤
	"yt_downloader/utils"
)

func main() {
	fmt.Println("üé¨ YouTube Downloader v2.0")
	fmt.Println("==========================")
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ yt-dlp
	utils.CheckUpdateYtDlp()
	
	// –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	var contentType string
	fmt.Println("\nüìã –ß—Ç–æ –±—É–¥–µ–º —Å–∫–∞—á–∏–≤–∞—Ç—å?")
	fmt.Println("1 - –ê—É–¥–∏–æ (MP3)")
	fmt.Println("2 - –í–∏–¥–µ–æ (MP4/WebM)")
	fmt.Print("–í–∞—à –≤—ã–±–æ—Ä: ")
	fmt.Scanln(&contentType)
	
	switch contentType {
	case "1":
		fmt.Println("\nüéµ === –†–ï–ñ–ò–ú –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –ê–£–î–ò–û ===")
		handleAudioDownload()
	case "2":
		fmt.Println("\nüé¨ === –†–ï–ñ–ò–ú –°–ö–ê–ß–ò–í–ê–ù–ò–Ø –í–ò–î–ï–û ===")
		handleVideoDownload()
	default:
		fmt.Println("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É.")
		return
	}
	
	fmt.Println("\nüéâ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
}

// handleAudioDownload –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
func handleAudioDownload() {
	// –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ
	audio.PromptAudioQuality()
	
	// –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
	var mode string
	fmt.Println("\nüì• –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")
	fmt.Println("1 - –û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
	fmt.Println("2 - –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞")
	fmt.Print("–í–∞—à –≤—ã–±–æ—Ä: ")
	fmt.Scanln(&mode)
	
	switch mode {
	case "1":
		// –û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
		fmt.Print("\nüîó –í–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ: ")
		var url string
		fmt.Scanln(&url)
		
		if !utils.IsValidURL(url) {
			fmt.Println("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL")
			return
		}
		
		fmt.Println("\nüîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
		fileName := audio.GetTitleFromURL(url)
		folder, _ := os.Getwd()
		
		fmt.Printf("üìÅ –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s.mp3\n", fileName)
		audio.DownloadAudio(url, fileName, folder)
		
	case "2":
		// –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
		fmt.Print("\nüìÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª: links.txt")
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
		if _, err := os.Stat("links.txt"); os.IsNotExist(err) {
			fmt.Println("\n‚ö† –§–∞–π–ª links.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
			fmt.Println("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª links.txt –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ URL –≤–∏–¥–µ–æ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
			return
		}
		
		audio.ProcessBatchFile("links.txt")
		
	default:
		fmt.Println("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞.")
	}
}

// handleVideoDownload –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
func handleVideoDownload() {
	// –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
	video.PromptVideoQuality()
	
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
	subOptions := subtitles.PromptSubtitleOptions()
	
	// –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
	var mode string
	fmt.Println("\nüì• –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")
	fmt.Println("1 - –û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
	fmt.Println("2 - –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞")
	fmt.Println("3 - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã (–±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)")
	fmt.Print("–í–∞—à –≤—ã–±–æ—Ä: ")
	fmt.Scanln(&mode)
	
	switch mode {
	case "1":
		// –û–¥–∏–Ω–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
		fmt.Print("\nüîó –í–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ: ")
		var url string
		fmt.Scanln(&url)
		
		if !utils.IsValidURL(url) {
			fmt.Println("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL")
			return
		}
		
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
		if subOptions.DownloadSubtitles {
			subtitles.ShowAvailableSubtitles(url)
		}
		
		fmt.Println("\nüîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
		fileName := video.GetVideoTitle(url)
		folder, _ := os.Getwd()
		
		fmt.Printf("üìÅ –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: %s\n", fileName)
		video.DownloadVideoWithSubtitles(url, fileName, folder, subOptions)
		
	case "2":
		// –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
		fmt.Print("\nüìÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª: links.txt")
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
		if _, err := os.Stat("links.txt"); os.IsNotExist(err) {
			fmt.Println("\n‚ö† –§–∞–π–ª links.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
			fmt.Println("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª links.txt –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ URL –≤–∏–¥–µ–æ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)")
			return
		}
		
		// –î–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
		processVideoBatchFileWithSubtitles("links.txt", subOptions)
		
	case "3":
		// –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã
		fmt.Print("\nüîó –í–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ: ")
		var url string
		fmt.Scanln(&url)
		
		if !utils.IsValidURL(url) {
			fmt.Println("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL")
			return
		}
		
		subtitles.ShowAvailableSubtitles(url)
		
	default:
		fmt.Println("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞.")
	}
}

// processVideoBatchFileWithSubtitles –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏
func processVideoBatchFileWithSubtitles(filePath string, subOptions subtitles.SubtitleOptions) {
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Printf("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: %s\n", filePath)
		return
	}
	defer file.Close()
	
	var urls []string
	scanner := bufio.NewScanner(file)
	
	// –ß–∏—Ç–∞–µ–º –≤—Å–µ URL –∏–∑ —Ñ–∞–π–ª–∞
	for scanner.Scan() {
		url := strings.TrimSpace(scanner.Text())
		if url == "" || strings.HasPrefix(url, "#") {
			continue // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
		}
		urls = append(urls, url)
	}
	
	if err := scanner.Err(); err != nil {
		fmt.Printf("‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
		return
	}
	
	if len(urls) == 0 {
		fmt.Println("‚ö† –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö URL")
		return
	}
	
	fmt.Printf("üìã –ù–∞–π–¥–µ–Ω–æ %d –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è\n", len(urls))
	folder, _ := os.Getwd()
	
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π URL
	for i, url := range urls {
		fmt.Printf("\nüé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º %d/%d: %s\n", i+1, len(urls), url)
		
		fileName := video.GetVideoTitle(url)
		video.DownloadVideoWithSubtitles(url, fileName, folder, subOptions)
		
		// –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
		if i < len(urls)-1 {
			fmt.Println("‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–∏–¥–µ–æ...")
			// time.Sleep(2 * time.Second) // —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–∞—É–∑–∞
		}
	}
	
	fmt.Printf("\nüéâ –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: %d\n", len(urls))
}